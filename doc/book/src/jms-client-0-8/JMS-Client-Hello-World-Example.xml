<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
[
<!ENTITY %  entities SYSTEM  "commonEntities.xml">
%entities;
]>
<!--

 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

-->

<chapter id="JMS-Client-0-8-Hello-World-Example">
	<title>Hello World Example</title>

	<para>The following program shows how to send and receive a message using the Qpid JMS client.
		JMS programs typically use JNDI to obtain connection factory and destination objects which
		the application needs. In this way the configuration is kept separate from the application
		code itself.</para>

	<para>In this example, we create a JNDI context using a properties file, use the context to
		lookup a connection factory, create and start a connection, create a session, and lookup a
		destination from the JNDI context. Then we create a producer and a consumer, send a message
		with the producer and receive it with the consumer. This code should be straightforward for
		anyone familiar with Java JMS.</para>

	<example>
		<title>"Hello world!" in Java</title>
		<programlisting lang="java">
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import java.util.Properties;

public class Hello {

	public Hello() {
	}
	
	public static void main(String[] args) throws Exception {
	  Hello producer = new Hello();
	  producer.runTest();
	}
	
	private void runTest() throws Exception {
	  Properties properties = new Properties();
	  properties.load(this.getClass().getResourceAsStream("jndi.properties"));  <co id="hello-java-properties" linkends="callout-java-properties"/>
	  Context context = new InitialContext(properties);   <co id="hello-java-context" linkends="callout-java-context"/>
	
	  ConnectionFactory connectionFactory
	      = (ConnectionFactory) context.lookup("qpidConnectionFactory"); <co id="hello-java-connection-factory" linkends="callout-java-connection-factory"/>
	  Connection connection = connectionFactory.createConnection();  <co id="hello-java-connection" linkends="callout-java-connection"/>
	  connection.start();  <co id="hello-java-start" linkends="callout-java-start"/>
	
	  Session session = connection.createSession(true, Session.SESSION_TRANSACTED);<co id="hello-java-session" linkends="callout-java-session"/>
	  Destination destination = (Destination) context.lookup("myqueue");  <co id="hello-java-destination" linkends="callout-java-destination"/>
	
	  MessageConsumer messageConsumer = session.createConsumer(destination);  <co id="hello-java-consumer" linkends="callout-java-consumer"/>
	  MessageProducer messageProducer = session.createProducer(destination);  <co id="hello-java-producer" linkends="callout-java-producer"/>
	
	  TextMessage message = session.createTextMessage("Hello world!");        <co id="hello-java-send" linkends="callout-java-send"/>
	  messageProducer.send(message);
	  session.commit();
	
	  message = (TextMessage)messageConsumer.receive();    <co id="hello-java-receive" linkends="callout-java-receive"/>
	  session.commit();
	  System.out.println(message.getText());
	
	  connection.close();  <co id="hello-java-close" linkends="callout-java-close"/>
	  context.close();   <co id="hello-java-jndi-close" linkends="callout-java-jndi-close"/>
	}
}
	</programlisting>
	</example>

	<calloutlist>
		<callout id="callout-java-properties" arearefs="hello-java-properties">
			<para>Loads the JNDI properties file, which specifies the connection factory, queues and topics. See <xref linkend="JMS-Client-0-8-JNDI-Properties-Format"/> for details.</para>
		</callout>
		<callout id="callout-java-context" arearefs="hello-java-context">
			<para>Creates the JNDI initial context.</para>
		</callout>
		<callout id="callout-java-connection-factory" arearefs="hello-java-connection-factory">
			<para>Looks up a JMS connection factory for Qpid.</para>
		</callout>
		<callout id="callout-java-connection" arearefs="hello-java-connection">
			<para>Creates a JMS connection.  Creating the JMS connections establishes the connection to the Broker.</para>
		</callout>
		<callout id="callout-java-start" arearefs="hello-java-start">
			<para>Starts the connection, required for the consumption of messages.</para>
		</callout>
		<callout id="callout-java-session" arearefs="hello-java-session">
			<para>Creates a transactional session.</para>
		</callout>
		<callout id="callout-java-destination" arearefs="hello-java-destination">
			<para>Looks up a destination for the queue with JNDI name myqueue.</para>
		</callout>
		<callout id="callout-java-consumer" arearefs="hello-java-consumer">
			<para>Creates a consumer that reads messages from the queue<footnote>
				<para>Creating consumer will automatically create the queue on the Broker and bind it to an exchange. Specifically, in this case
				 as the <literal>queue.</literal> form is used in the JNDI properties the effect will be to create a queue called
			     <literal>queue1</literal> on the Broker, and create a binding between the <literal>amq.direct</literal> exchange
			     and this queue using the queue's name. This process is described in detail in
			     <xref linkend="JMS-Client-0-8-Client-Understanding-MessageConsumer-ConsumerSideEffect"/></para></footnote>.</para>
		</callout>
		<callout id="callout-java-producer" arearefs="hello-java-producer">
			<para>Creates a producer that sends messages to the queue.</para>
		</callout>
		<callout id="callout-java-send" arearefs="hello-java-send">
			<para>Creates a new TextMessages, publishes the messages and commits the session.</para>
		</callout>
		<callout id="callout-java-receive" arearefs="hello-java-receive">
			<para>Reads the next available message (awaiting indefinitely if necessary) and commits the session.</para>
		</callout>
		<callout id="callout-java-close" arearefs="hello-java-close">
			<para>Closes the Connection. All sessions owned by the Connection along with their
				MessageConsumers and MessageProducers are automatically closed.  The connection to the
			    Broker is closed as this point.</para>
		</callout>
		<callout id="callout-java-jndi-close" arearefs="hello-java-jndi-close">
			<para>Closes the JNDI context.</para>
		</callout>
	</calloutlist>

	<para>The contents of the <literal>jndi.properties</literal> file are shown below.</para>

	<example id="JMS-Client-0-8-Hello-World-Example-PropertiesFile">
		<title>JNDI Properties File for "Hello world!" example</title>
		<programlisting>
java.naming.factory.initial = org.apache.qpid.jndi.PropertiesFileInitialContextFactory
connectionfactory.qpidConnectionFactory = amqp://guest:guest@clientid/test?brokerlist='tcp://localhost:5672' <co id="hello-properties-connectionfactory" linkends="callout-hello-properties-connectionfactory"/>
queue.myqueue = queue1 <co id="hello-properties-destination" linkends="callout-hello-properties-destination"/>
	</programlisting>
	</example>

	<calloutlist>
		<callout id="callout-hello-properties-connectionfactory"
			arearefs="hello-properties-connectionfactory">
			<para>Defines a connection factory from which Connections can be created. The syntax of
				a ConnectionURL is given in <xref linkend="JMS-Client-0-8-JNDI-Properties-Format"/>.</para>
		</callout>
		<callout id="callout-hello-properties-destination" arearefs="hello-properties-destination">
			<para>Defines a queue for which MessageProducers and/or MessageConsumers send and receive messages. The format of these entries is
				 described in <xref linkend="JMS-Client-0-8-JNDI-Properties-Format"/>.</para>
		</callout>
	</calloutlist>


</chapter>
