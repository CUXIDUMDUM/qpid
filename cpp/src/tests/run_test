#!/bin/bash

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#
# Set up environment and run a test executable or script.
#
# Output nothing if test passes, show the output if it fails and
# leave output in <test>.log for examination.  
#
# If qpidd.port exists and is not empty run test with QPID_PORT=`cat qpidd.port`
# 
# If $VALGRIND if is set run under valgrind. If there are valgrind
# erros show valgrind output, also leave it in <test>.valgrind for
# examination.
#

srcdir=`dirname $0`
source ./test_env.sh
source $srcdir/vg_check

# Export variables from makefile.
export srcdir

# Set QPID_PORT if qpidd.port exists.
test -s qpidd.port && QPID_PORT=`cat qpidd.port`
export QPID_PORT

VG_LOG="`basename $1`.vglog"
rm -f $VG_LOG*

# Use VALGRIND_OPTS="--gen-suppressions=all" to generated suppressions
VALGRIND_OPTS="$VALGRIND_OPTS
--leak-check=full
--demangle=yes
--suppressions=$srcdir/.valgrind.supp
--num-callers=25
--log-file=$VG_LOG --
"
ERROR=0
if [ ! -x $1 ] ; then
    echo "Cannot execute $1"
    ERROR=1
elif file $1 | grep -q text; then
    # This is a shell script, just execute it.
    exec "$@"
elif [ -n "$VALGRIND" ] ; then
    # This is a real executable, valgrind it.
    # Hide output unless there's an error.
    $VALGRIND $VALGRIND_OPTS "$@" 2>&1 || ERROR=1
    vg_check $VG_LOG* || ERROR=1
else
    "$@" 2>&1 || ERROR=1
fi

exit $ERROR

