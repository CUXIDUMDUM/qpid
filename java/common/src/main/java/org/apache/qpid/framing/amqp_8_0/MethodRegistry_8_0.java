/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/*
 * This file is auto-generated by Qpid Gentools v.0.1 - do not modify.
 * Supported AMQP version:
 *   8-0
 */

package org.apache.qpid.framing.amqp_8_0;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.qpid.codec.MarkableDataInput;
import org.apache.qpid.framing.*;
import org.apache.qpid.framing.abstraction.ProtocolVersionMethodConverter;
import org.apache.qpid.protocol.AMQConstant;


public class MethodRegistry_8_0 extends MethodRegistry
{

    private static final Logger _log = LoggerFactory.getLogger(MethodRegistry.class);

    private ProtocolVersionMethodConverter _protocolVersionConverter = new MethodConverter_8_0();

    private final AMQMethodBodyInstanceFactory[][] _factories = new AMQMethodBodyInstanceFactory[91][];

    public MethodRegistry_8_0()
    {
        this(new ProtocolVersion((byte)8,(byte)0));
    }

    public MethodRegistry_8_0(ProtocolVersion pv)
    {
        super(pv);



        // Register method body instance factories for the Connection class.

        _factories[10] = new AMQMethodBodyInstanceFactory[62];

        _factories[10][10] = ConnectionStartBody.getFactory();
        _factories[10][11] = ConnectionStartOkBody.getFactory();
        _factories[10][20] = ConnectionSecureBody.getFactory();
        _factories[10][21] = ConnectionSecureOkBody.getFactory();
        _factories[10][30] = ConnectionTuneBody.getFactory();
        _factories[10][31] = ConnectionTuneOkBody.getFactory();
        _factories[10][40] = ConnectionOpenBody.getFactory();
        _factories[10][41] = ConnectionOpenOkBody.getFactory();
        _factories[10][50] = ConnectionRedirectBodyImpl.getFactory();
        _factories[10][60] = ConnectionCloseBodyImpl.getFactory();
        _factories[10][61] = ConnectionCloseOkBodyImpl.getFactory();



        // Register method body instance factories for the Channel class.

        _factories[20] = new AMQMethodBodyInstanceFactory[42];

        _factories[20][10] = ChannelOpenBody.getFactory();
        _factories[20][11] = ChannelOpenOkBodyImpl.getFactory();
        _factories[20][20] = ChannelFlowBody.getFactory();
        _factories[20][21] = ChannelFlowOkBody.getFactory();
        _factories[20][30] = ChannelAlertBodyImpl.getFactory();
        _factories[20][40] = ChannelCloseBody.getFactory();
        _factories[20][41] = ChannelCloseOkBody.getFactory();



        // Register method body instance factories for the Access class.

        _factories[30] = new AMQMethodBodyInstanceFactory[12];

        _factories[30][10] = AccessRequestBodyImpl.getFactory();
        _factories[30][11] = AccessRequestOkBodyImpl.getFactory();



        // Register method body instance factories for the Exchange class.

        _factories[40] = new AMQMethodBodyInstanceFactory[24];

        _factories[40][10] = ExchangeDeclareBody.getFactory();
        _factories[40][11] = ExchangeDeclareOkBody.getFactory();
        _factories[40][20] = ExchangeDeleteBody.getFactory();
        _factories[40][21] = ExchangeDeleteOkBody.getFactory();
        _factories[40][22] = ExchangeBoundBody.getFactory();
        _factories[40][23] = ExchangeBoundOkBody.getFactory();



        // Register method body instance factories for the Queue class.

        _factories[50] = new AMQMethodBodyInstanceFactory[42];

        _factories[50][10] = QueueDeclareBody.getFactory();
        _factories[50][11] = QueueDeclareOkBody.getFactory();
        _factories[50][20] = QueueBindBody.getFactory();
        _factories[50][21] = QueueBindOkBody.getFactory();
        _factories[50][30] = QueuePurgeBody.getFactory();
        _factories[50][31] = QueuePurgeOkBody.getFactory();
        _factories[50][40] = QueueDeleteBody.getFactory();
        _factories[50][41] = QueueDeleteOkBody.getFactory();



        // Register method body instance factories for the Basic class.

        _factories[60] = new AMQMethodBodyInstanceFactory[102];

        _factories[60][10] = BasicQosBody.getFactory();
        _factories[60][11] = BasicQosOkBody.getFactory();
        _factories[60][20] = BasicConsumeBody.getFactory();
        _factories[60][21] = BasicConsumeOkBody.getFactory();
        _factories[60][30] = BasicCancelBody.getFactory();
        _factories[60][31] = BasicCancelOkBody.getFactory();
        _factories[60][40] = BasicPublishBody.getFactory();
        _factories[60][50] = BasicReturnBody.getFactory();
        _factories[60][60] = BasicDeliverBody.getFactory();
        _factories[60][70] = BasicGetBody.getFactory();
        _factories[60][71] = BasicGetOkBody.getFactory();
        _factories[60][72] = BasicGetEmptyBody.getFactory();
        _factories[60][80] = BasicAckBody.getFactory();
        _factories[60][90] = BasicRejectBody.getFactory();
        _factories[60][100] = BasicRecoverBody.getFactory();
        _factories[60][101] = BasicRecoverOkBodyImpl.getFactory();



        // Register method body instance factories for the Tx class.

        _factories[90] = new AMQMethodBodyInstanceFactory[32];

        _factories[90][10] = TxSelectBody.getFactory();
        _factories[90][11] = TxSelectOkBody.getFactory();
        _factories[90][20] = TxCommitBody.getFactory();
        _factories[90][21] = TxCommitOkBody.getFactory();
        _factories[90][30] = TxRollbackBody.getFactory();
        _factories[90][31] = TxRollbackOkBody.getFactory();

    }

    public AMQMethodBody convertToBody(MarkableDataInput in, long size)
        throws AMQFrameDecodingException, IOException
    {
        int classId = in.readUnsignedShort();
        int methodId = in.readUnsignedShort();

        AMQMethodBodyInstanceFactory bodyFactory;
        try
        {
            bodyFactory = _factories[classId][methodId];
        }
        catch(NullPointerException e)
        {
            throw new AMQFrameDecodingException(AMQConstant.COMMAND_INVALID,
                "Class " + classId + " unknown in AMQP version 8-0"
                 + " (while trying to decode class " + classId + " method " + methodId + ".");
        }
        catch(IndexOutOfBoundsException e)
        {
            if(classId >= _factories.length)
            {
                throw new AMQFrameDecodingException(AMQConstant.COMMAND_INVALID,
                    "Class " + classId + " unknown in AMQP version 8-0"
                     + " (while trying to decode class " + classId + " method " + methodId + ".");

            }
            else
            {
                throw new AMQFrameDecodingException(AMQConstant.COMMAND_INVALID,
                    "Method " + methodId + " unknown in AMQP version 8-0"
                     + " (while trying to decode class " + classId + " method " + methodId + ".");

            }
        }

        if (bodyFactory == null)
        {
            throw new AMQFrameDecodingException(AMQConstant.COMMAND_INVALID,
                "Method " + methodId + " unknown in AMQP version 8-0"
                 + " (while trying to decode class " + classId + " method " + methodId + ".");
        }

        return bodyFactory.newInstance(in, size);
    }

    public int getMaxClassId()
    {
        return 120;
    }

    public int getMaxMethodId(int classId)
    {
        return _factories[classId].length - 1;
    }



    public ConnectionStartBody createConnectionStartBody(
            final short versionMajor,
            final short versionMinor,
            final FieldTable serverProperties,
            final byte[] mechanisms,
            final byte[] locales
                                                            )
    {
        return new ConnectionStartBody(
                                versionMajor,
                                versionMinor,
                                serverProperties,
                                mechanisms,
                                locales
                                );
    }

    public ConnectionStartOkBody createConnectionStartOkBody(
            final FieldTable clientProperties,
            final AMQShortString mechanism,
            final byte[] response,
            final AMQShortString locale
                                                                )
    {
        return new ConnectionStartOkBody(
                                clientProperties,
                                mechanism,
                                response,
                                locale
                                );
    }

    public ConnectionSecureBody createConnectionSecureBody(
            final byte[] challenge
                                                              )
    {
        return new ConnectionSecureBody(
                                challenge
                                );
    }

    public ConnectionSecureOkBody createConnectionSecureOkBody(
            final byte[] response
                                                                  )
    {
        return new ConnectionSecureOkBody(
                                response
                                );
    }

    public ConnectionTuneBody createConnectionTuneBody(
            final int channelMax,
            final long frameMax,
            final int heartbeat
                                                          )
    {
        return new ConnectionTuneBody(
                                channelMax,
                                frameMax,
                                heartbeat
                                );
    }

    public ConnectionTuneOkBody createConnectionTuneOkBody(
            final int channelMax,
            final long frameMax,
            final int heartbeat
                                                              )
    {
        return new ConnectionTuneOkBody(
                                channelMax,
                                frameMax,
                                heartbeat
                                );
    }

    public ConnectionOpenBody createConnectionOpenBody(
            final AMQShortString virtualHost,
            final AMQShortString capabilities,
            final boolean insist
                                                          )
    {
        return new ConnectionOpenBody(
                                virtualHost,
                                capabilities,
                                insist
                                );
    }

    public ConnectionOpenOkBody createConnectionOpenOkBody(
            final AMQShortString knownHosts
                                                              )
    {
        return new ConnectionOpenOkBody(
                                knownHosts
                                );
    }

    public ConnectionRedirectBody createConnectionRedirectBody(
                                final AMQShortString host,
                                final AMQShortString knownHosts
                                )
    {
        return new ConnectionRedirectBodyImpl(
                                host,
                                knownHosts
                                );
    }

    public ConnectionCloseBody createConnectionCloseBody(
                                final int replyCode,
                                final AMQShortString replyText,
                                final int classId,
                                final int methodId
                                )
    {
        return new ConnectionCloseBodyImpl(
                                replyCode,
                                replyText,
                                classId,
                                methodId
                                );
    }

    public ConnectionCloseOkBody createConnectionCloseOkBody(
                                )
    {
        return new ConnectionCloseOkBodyImpl(
                                );
    }




    public ChannelOpenBody createChannelOpenBody(
            final AMQShortString outOfBand
                                                    )
    {
        return new ChannelOpenBody(
                                outOfBand
                                );
    }

    public ChannelOpenOkBody createChannelOpenOkBody(
                                )
    {
        return new ChannelOpenOkBodyImpl(
                                );
    }

    public ChannelFlowBody createChannelFlowBody(
            final boolean active
                                                    )
    {
        return new ChannelFlowBody(
                                active
                                );
    }

    public ChannelFlowOkBody createChannelFlowOkBody(
            final boolean active
                                                        )
    {
        return new ChannelFlowOkBody(
                                active
                                );
    }

    public ChannelAlertBody createChannelAlertBody(
                                final int replyCode,
                                final AMQShortString replyText,
                                final FieldTable details
                                )
    {
        return new ChannelAlertBodyImpl(
                                replyCode,
                                replyText,
                                details
                                );
    }

    public ChannelCloseBody createChannelCloseBody(
            final int replyCode,
            final AMQShortString replyText,
            final int classId,
            final int methodId
                                                      )
    {
        return new ChannelCloseBody(
                                replyCode,
                                replyText,
                                classId,
                                methodId
                                );
    }

    public ChannelCloseOkBody createChannelCloseOkBody(
                                                          )
    {
        return new ChannelCloseOkBody(
                                );
    }




    public AccessRequestBody createAccessRequestBody(
                                final AMQShortString realm,
                                final boolean exclusive,
                                final boolean passive,
                                final boolean active,
                                final boolean write,
                                final boolean read
                                )
    {
        return new AccessRequestBodyImpl(
                                realm,
                                exclusive,
                                passive,
                                active,
                                write,
                                read
                                );
    }

    public AccessRequestOkBody createAccessRequestOkBody(
                                final int ticket
                                )
    {
        return new AccessRequestOkBodyImpl(
                                ticket
                                );
    }




    public ExchangeDeclareBody createExchangeDeclareBody(
            final int ticket,
            final AMQShortString exchange,
            final AMQShortString type,
            final boolean passive,
            final boolean durable,
            final boolean autoDelete,
            final boolean internal,
            final boolean nowait,
            final FieldTable arguments
                                                            )
    {
        return new ExchangeDeclareBody(
                                ticket,
                                exchange,
                                type,
                                passive,
                                durable,
                                autoDelete,
                                internal,
                                nowait,
                                arguments
                                );
    }

    public ExchangeDeclareOkBody createExchangeDeclareOkBody(
                                                                )
    {
        return new ExchangeDeclareOkBody(
                                );
    }

    public ExchangeDeleteBody createExchangeDeleteBody(
            final int ticket,
            final AMQShortString exchange,
            final boolean ifUnused,
            final boolean nowait
                                                          )
    {
        return new ExchangeDeleteBody(
                                ticket,
                                exchange,
                                ifUnused,
                                nowait
                                );
    }

    public ExchangeDeleteOkBody createExchangeDeleteOkBody(
                                                              )
    {
        return new ExchangeDeleteOkBody(
                                );
    }

    public ExchangeBoundBody createExchangeBoundBody(
            final AMQShortString exchange,
            final AMQShortString routingKey,
            final AMQShortString queue
                                                        )
    {
        return new ExchangeBoundBody(
                                exchange,
                                routingKey,
                                queue
                                );
    }

    public ExchangeBoundOkBody createExchangeBoundOkBody(
            final int replyCode,
            final AMQShortString replyText
                                                            )
    {
        return new ExchangeBoundOkBody(
                                replyCode,
                                replyText
                                );
    }




    public QueueDeclareBody createQueueDeclareBody(
            final int ticket,
            final AMQShortString queue,
            final boolean passive,
            final boolean durable,
            final boolean exclusive,
            final boolean autoDelete,
            final boolean nowait,
            final FieldTable arguments
                                                      )
    {
        return new QueueDeclareBody(
                                ticket,
                                queue,
                                passive,
                                durable,
                                exclusive,
                                autoDelete,
                                nowait,
                                arguments
                                );
    }

    public QueueDeclareOkBody createQueueDeclareOkBody(
            final AMQShortString queue,
            final long messageCount,
            final long consumerCount
                                                          )
    {
        return new QueueDeclareOkBody(
                                queue,
                                messageCount,
                                consumerCount
                                );
    }

    public QueueBindBody createQueueBindBody(
            final int ticket,
            final AMQShortString queue,
            final AMQShortString exchange,
            final AMQShortString routingKey,
            final boolean nowait,
            final FieldTable arguments
                                                )
    {
        return new QueueBindBody(
                                ticket,
                                queue,
                                exchange,
                                routingKey,
                                nowait,
                                arguments
                                );
    }

    public QueueBindOkBody createQueueBindOkBody(
                                                    )
    {
        return new QueueBindOkBody(
                                );
    }

    public QueuePurgeBody createQueuePurgeBody(
            final int ticket,
            final AMQShortString queue,
            final boolean nowait
                                                  )
    {
        return new QueuePurgeBody(
                                ticket,
                                queue,
                                nowait
                                );
    }

    public QueuePurgeOkBody createQueuePurgeOkBody(
            final long messageCount
                                                      )
    {
        return new QueuePurgeOkBody(
                                messageCount
                                );
    }

    public QueueDeleteBody createQueueDeleteBody(
            final int ticket,
            final AMQShortString queue,
            final boolean ifUnused,
            final boolean ifEmpty,
            final boolean nowait
                                                    )
    {
        return new QueueDeleteBody(
                                ticket,
                                queue,
                                ifUnused,
                                ifEmpty,
                                nowait
                                );
    }

    public QueueDeleteOkBody createQueueDeleteOkBody(
            final long messageCount
                                                        )
    {
        return new QueueDeleteOkBody(
                                messageCount
                                );
    }




    public BasicQosBody createBasicQosBody(
            final long prefetchSize,
            final int prefetchCount,
            final boolean global
                                              )
    {
        return new BasicQosBody(
                                prefetchSize,
                                prefetchCount,
                                global
                                );
    }

    public BasicQosOkBody createBasicQosOkBody(
                                                  )
    {
        return new BasicQosOkBody(
                                );
    }

    public BasicConsumeBody createBasicConsumeBody(
            final int ticket,
            final AMQShortString queue,
            final AMQShortString consumerTag,
            final boolean noLocal,
            final boolean noAck,
            final boolean exclusive,
            final boolean nowait,
            final FieldTable arguments
                                                      )
    {
        return new BasicConsumeBody(
                                ticket,
                                queue,
                                consumerTag,
                                noLocal,
                                noAck,
                                exclusive,
                                nowait,
                                arguments
                                );
    }

    public BasicConsumeOkBody createBasicConsumeOkBody(
            final AMQShortString consumerTag
                                                          )
    {
        return new BasicConsumeOkBody(
                                consumerTag
                                );
    }

    public BasicCancelBody createBasicCancelBody(
            final AMQShortString consumerTag,
            final boolean nowait
                                                    )
    {
        return new BasicCancelBody(
                                consumerTag,
                                nowait
                                );
    }

    public BasicCancelOkBody createBasicCancelOkBody(
            final AMQShortString consumerTag
                                                        )
    {
        return new BasicCancelOkBody(
                                consumerTag
                                );
    }

    public BasicPublishBody createBasicPublishBody(
            final int ticket,
            final AMQShortString exchange,
            final AMQShortString routingKey,
            final boolean mandatory,
            final boolean immediate
                                                      )
    {
        return new BasicPublishBody(
                                ticket,
                                exchange,
                                routingKey,
                                mandatory,
                                immediate
                                );
    }

    public BasicReturnBody createBasicReturnBody(
            final int replyCode,
            final AMQShortString replyText,
            final AMQShortString exchange,
            final AMQShortString routingKey
                                                    )
    {
        return new BasicReturnBody(
                                replyCode,
                                replyText,
                                exchange,
                                routingKey
                                );
    }

    public BasicDeliverBody createBasicDeliverBody(
            final AMQShortString consumerTag,
            final long deliveryTag,
            final boolean redelivered,
            final AMQShortString exchange,
            final AMQShortString routingKey
                                                      )
    {
        return new BasicDeliverBody(
                                consumerTag,
                                deliveryTag,
                                redelivered,
                                exchange,
                                routingKey
                                );
    }

    public BasicGetBody createBasicGetBody(
            final int ticket,
            final AMQShortString queue,
            final boolean noAck
                                              )
    {
        return new BasicGetBody(
                                ticket,
                                queue,
                                noAck
                                );
    }

    public BasicGetOkBody createBasicGetOkBody(
            final long deliveryTag,
            final boolean redelivered,
            final AMQShortString exchange,
            final AMQShortString routingKey,
            final long messageCount
                                                  )
    {
        return new BasicGetOkBody(
                                deliveryTag,
                                redelivered,
                                exchange,
                                routingKey,
                                messageCount
                                );
    }

    public BasicGetEmptyBody createBasicGetEmptyBody(
            final AMQShortString clusterId
                                                        )
    {
        return new BasicGetEmptyBody(
                                clusterId
                                );
    }

    public BasicAckBody createBasicAckBody(
            final long deliveryTag,
            final boolean multiple
                                              )
    {
        return new BasicAckBody(
                                deliveryTag,
                                multiple
                                );
    }

    public BasicRejectBody createBasicRejectBody(
            final long deliveryTag,
            final boolean requeue
                                                    )
    {
        return new BasicRejectBody(
                                deliveryTag,
                                requeue
                                );
    }

    public BasicRecoverBody createBasicRecoverBody(
            final boolean requeue
                                                      )
    {
        return new BasicRecoverBody(
                                requeue
                                );
    }

    public BasicRecoverOkBody createBasicRecoverOkBody(
                                )
    {
        return new BasicRecoverOkBodyImpl(
                                );
    }


    public TxSelectBody createTxSelectBody(
                                              )
    {
        return new TxSelectBody(
                                );
    }

    public TxSelectOkBody createTxSelectOkBody(
                                                  )
    {
        return new TxSelectOkBody(
                                );
    }

    public TxCommitBody createTxCommitBody(
                                              )
    {
        return new TxCommitBody(
                                );
    }

    public TxCommitOkBody createTxCommitOkBody(
                                                  )
    {
        return new TxCommitOkBody(
                                );
    }

    public TxRollbackBody createTxRollbackBody(
                                                  )
    {
        return new TxRollbackBody(
                                );
    }

    public TxRollbackOkBody createTxRollbackOkBody(
                                                      )
    {
        return new TxRollbackOkBody(
                                );
    }





    public ProtocolVersionMethodConverter getProtocolVersionMethodConverter()
    {
        return _protocolVersionConverter;
    }

}
